// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider      = "prisma-client-js"
  output        = "../node_modules/.prisma/client"
  binaryTargets = ["native", "debian-openssl-3.0.x"]
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

// Modèle utilisateur pour l'authentification admin
model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  email         String    @unique
  password      String
  name          String?
  role          Role      @default(ADMIN)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  // Auth.js relations
  accounts      Account[]
  sessions      Session[]
  
  @@map("users")
}

// Auth.js models for session management
model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

// Articles de blog / Actualités
model Post {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  title         String
  slug          String    @unique
  excerpt       String?
  content       String
  coverImage    String?
  published     Boolean   @default(false)
  publishedAt   DateTime?
  category      String?
  tags          String[]
  viewCount     Int       @default(0)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  @@index([published, publishedAt])
  @@map("posts")
}

// Événements / Concerts
model Event {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  venue         String
  city          String
  country       String
  date          DateTime
  time          String?
  description   String?
  ticketLink    String?
  coverImage    String?
  status        EventStatus @default(CONFIRMED)
  featured      Boolean   @default(false)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  @@index([date])
  @@index([status, date])
  @@map("events")
}

// Tracks / Discographie
model Track {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  title         String
  artist        String    @default("Peak'O")
  featuring     String?
  releaseDate   DateTime
  releaseType   ReleaseType
  genre         String    @default("Hardstyle")
  duration      String?
  coverArt      String?
  audioFile     String?
  spotifyUrl    String?
  appleMusicUrl String?
  soundcloudUrl String?
  youtubeUrl    String?
  beatportUrl   String?
  playCount     Int       @default(0)
  featured      Boolean   @default(false)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  @@index([releaseDate])
  @@index([featured, releaseDate])
  @@map("tracks")
}

// Galerie photos
model Gallery {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  description   String?
  eventId       String?   @db.ObjectId
  date          DateTime
  photos        Photo[]
  coverPhoto    String?
  featured      Boolean   @default(false)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  @@index([date])
  @@map("galleries")
}

// Photos individuelles
type Photo {
  url           String
  caption       String?
  width         Int?
  height        Int?
  thumbnailUrl  String?
}

// Messages de contact / Demandes de booking
model ContactMessage {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  email         String
  phone         String?
  subject       String
  message       String
  type          ContactType @default(GENERAL)
  eventDate     DateTime?
  eventLocation String?
  budget        String?
  status        MessageStatus @default(NEW)
  replied       Boolean   @default(false)
  repliedAt     DateTime?
  notes         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  
  @@index([status, createdAt])
  @@index([type, status])
  @@map("contact_messages")
}

// Enums
enum Role {
  ADMIN
  SUPER_ADMIN
}

enum EventStatus {
  CONFIRMED
  PENDING
  CANCELLED
  POSTPONED
}

enum ReleaseType {
  SINGLE
  EP
  ALBUM
  REMIX
  BOOTLEG
  COLLAB
}

enum ContactType {
  GENERAL
  BOOKING
  COLLABORATION
  PRESS
  OTHER
}

enum MessageStatus {
  NEW
  READ
  IN_PROGRESS
  ANSWERED
  ARCHIVED
}