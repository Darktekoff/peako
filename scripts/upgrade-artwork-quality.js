const { PrismaClient } = require('@prisma/client')

const prisma = new PrismaClient()

async function upgradeArtworkQuality() {
  console.log('üé® Mise √† jour de la qualit√© des artworks...\n')

  try {
    // R√©cup√©rer toutes les tracks avec un artwork
    const tracks = await prisma.track.findMany({
      where: {
        coverArt: {
          not: null
        }
      }
    })

    console.log(`üìä ${tracks.length} tracks avec artwork trouv√©es\n`)

    let updated = 0

    for (const track of tracks) {
      if (track.coverArt && track.coverArt.includes('soundcloud.com')) {
        let newArtworkUrl = track.coverArt

        // Si l'URL ne contient pas d√©j√† -t500x500, l'ajouter
        if (!newArtworkUrl.includes('-t500x500') && !newArtworkUrl.includes('-original')) {
          if (newArtworkUrl.includes('-large')) {
            newArtworkUrl = newArtworkUrl.replace('-large', '-t500x500')
          } else if (newArtworkUrl.includes('.jpg')) {
            newArtworkUrl = newArtworkUrl.replace('.jpg', '-t500x500.jpg')
          }
        }

        // Mettre √† jour seulement si l'URL a chang√©
        if (newArtworkUrl !== track.coverArt) {
          await prisma.track.update({
            where: { id: track.id },
            data: { coverArt: newArtworkUrl }
          })
          
          console.log(`‚úÖ ${track.title}: artwork mis √† jour`)
          console.log(`   Avant: ${track.coverArt}`)
          console.log(`   Apr√®s: ${newArtworkUrl}\n`)
          
          updated++
        }
      }
    }

    console.log(`\nüéâ Termin√©! ${updated} artworks mis √† jour vers la haute qualit√©.`)

  } catch (error) {
    console.error('‚ùå Erreur:', error)
  } finally {
    await prisma.$disconnect()
  }
}

// Ex√©cuter le script
upgradeArtworkQuality()